"""
Run tests from the FVS submodule
"""

import os
import pytest
import pandas as pd
import numpy as np
import time

import pyfvs
from pyfvs import fvs

root = os.path.split(__file__)[0]
fvs_tests = f'{root}/../fvs/tests'

fmsc_params = [
        ['pn', f'{fvs_tests}/FVSpn/pnt01.key', f'{fvs_tests}/FVSpn/pnt01.sum.save'],
        ['wc', f'{fvs_tests}/FVSwc/wct01.key', f'{fvs_tests}/FVSwc/wct01.sum.save'],
        ['so', f'{fvs_tests}/FVSso/sot01.key', f'{fvs_tests}/FVSso/sot01.sum.save'],
        ['ca', f'{fvs_tests}/FVSca/cat01.key', f'{fvs_tests}/FVSca/cat01.sum.save'],
        ['ec', f'{fvs_tests}/FVSec/ect01.key', f'{fvs_tests}/FVSec/ect01.sum.save'],
        ['oc', f'{fvs_tests}/FVSoc/oct01.key', f'{fvs_tests}/FVSoc/oct01.sum.save'],
        ['op', f'{fvs_tests}/FVSop/opt01.key', f'{fvs_tests}/FVSop/opt01.sum.save'],
        ]

@pytest.mark.parametrize(('variant', 'kwd_path', 'sum_path'), fmsc_params)
def test_fmsc(variant, kwd_path, sum_path):

    ## NOTE: FMSC tests are in the FVS subfolder, which won't be available with an out-of-source build
    if not os.path.exists(kwd_path):
        pytest.skip('FMSC keyword file not found: {}'.format(kwd_path))
        return None

    try:
        f = fvs.FVS(variant)

    except ImportError:
        pytest.skip('No variant library: {}'.format(variant))
        return None

    except:
        raise

    f.init_projection(os.path.abspath(kwd_path))

    for c in range(f.globals.ncyc):
        r = f.grow()

    r = f.end_projection()
    assert r == 0

    widths = [4, 4, 6, 4, 5, 4, 4, 5, 6, 6, 6, 6, 6, 6, 6, 4, 5, 4, 4, 5, 8, 5, 6, 8, 4, 2, 1]
    fldnames = (
            'year,age,tpa,baa,sdi,ccf,top_ht,qmd,total_cuft'
            ',merch_cuft,merch_bdft'
            ',rem_tpa,rem_total_cuft'
            ',rem_merch_cuft,rem_merch_bdft'
            ',res_baa,res_sdi'
            ',res_ccf,res_top_ht,resid_qmd,grow_years'
            ',annual_acc,annual_mort,mai_merch_cuft,for_type'
            ',size_class,stocking_class'
            ).split(',')

    # Read the sum file generated by the "official" FVS executable
    sum_check = pd.read_fwf(os.path.join(root, sum_path), skiprows=0, widths=widths)
    sum_check.columns = fldnames

    # Read the sum file produced by the pyfvs variant wrapper
    p = os.path.join(root, os.path.splitext(sum_path)[0])
    sum_test = pd.read_fwf(p, skiprows=0, widths=widths)
    sum_test.columns = fldnames

    n = sum_test.shape[0]

    # print(sum_check.iloc[:n]['year'])
    # print(sum_test.iloc[:n]['year'])
    for fld in fldnames[:18]:
        ## FIXME: Volume mrules.f includes modified merch rules for ODF
        if 'merch' in fld:
            continue
        a = sum_check.iloc[:n][fld].astype(float)
        b = sum_test.iloc[:n][fld].astype(float)
        assert np.all(np.isclose(a, b, atol=1))


if __name__ == '__main__':
    test_fmsc(*fmsc_params[0])
